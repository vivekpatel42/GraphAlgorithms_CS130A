

For this assignment, given an undirected graph you are required to:

	* Read the graph into an adjacency list data structure

	* Implement the function to count the degree of separation (shortest path) between two vertices.
	  All edge weights are 1, so you can simply do a BFS.

	* Implement the function that counts the number of nodes that are at most k distance apart a given
	  node.

For all these problems, you will only need to modify the Graph.h and Graph.cc

	make : compiles the source files
	make test : runs the testcases

testcases:
	test-small.txt is a super-simple example.

	4 3  	/* Indicates we want to read a graph with 4 nodes and 3 edges */
	0 1  	/* These next three lines will be the edges */
	1 2  	/* ~~~ */
	2 3  	/* ~~~ At this point we have the graph : 0 ---- 1 ---- 2 ---- 3
	3    	/* Indicates there are 3 forthcoming testcases for degree of separation */
	0 1 1	/* The rightmost value is the result. That is degreeOfSeparation(0, 1) == 1 */
	0 2 2   /* Similarly, degreeOfSeparation(0, 2) == 2 */
	0 3 3   /* degreeOfSeparation(0, 3) == 3 */
	2		/* Indicates there are 2 forthcoming testcases for counting distance at most k */
	1 1 3   /* Here starting vertex = 1, k =1. The rightmost value is the result */
	2 1 3   /* Here starting vertex = 2, k =1. The rightmost value is the result, that is there are 3 such nodes */

	test-large.txt is a randomly generated big graph. The time limit for this graph is 3s.
	

